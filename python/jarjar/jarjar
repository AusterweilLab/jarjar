#! /usr/bin/env python

from jarjar import jarjar
from _screenutils import Screen, ScreenNotFoundError

import time
import os
import sys
import argparse
import re

PARSER = argparse.ArgumentParser()

'''
set up screens
Evniornment wizard
Suggested commands on errors

'''

PARSER.add_argument(
	'program',
	help="Set task to run in a screen.",
	nargs='*',
	default=[]
)

PARSER.add_argument(
	"-m",
	"--message",
	help="Message to send.",
	nargs='*',
	default=[]
)

PARSER.add_argument(
	"-w",
	"--webhook",
	help="Set webhook target.",
	default=None
)

PARSER.add_argument(
	"-u", '-c',
	"--channel",
	help="Set user/channel target.",
	default=None
)

PARSER.add_argument(
	"-a", '-r',
	"--attach",
	help="Attach to screen.",
	default=False,
	action='store_true'
)

PARSER.add_argument(
	"-S",
	dest='screen_name',
	help="Set the name of the screen. Default to first 10 characters of the task",
	default=None,
	nargs=1
)

PARSER.add_argument(
	"-e",
	dest='echo',
	action='store_true',
	help=argparse.SUPPRESS,
	default=False
)

# get arguments from parser
ARGS = PARSER.parse_args()

# warns / checks
if not ARGS.message and not ARGS.program:
	PARSER.print_help(sys.stderr)
	print('\nProvide a message or some task too complete!')
	sys.exit(1)

if ARGS.echo:
	print('Psst-- `-e` is no longer needed!')

if not ARGS.program:
	if ARGS.attach:
		print('Note: You asked to attach but there is no task to run.')

	if ARGS.screen_name is not None:
		print('Note: You named a screen but there is no task to run.')


def _append_to_name(name):
	"""Append an `__{integer}` to a name or add to it."""

	suffix = '__'
	appended = suffix in name and name.split(suffix)[-1].isdigit()
	if not appended:
		return name + suffix + '1'

	parts = name.split(suffix)
	stem = suffix.join(parts[:-1])
	return stem + suffix + str(int(parts[-1]) + 1)


def _make_jarjar_shell(m=None, c=None, w=None):
	"""Construct a jarjar shell command."""

	def make_flag(k, v):
		"""Ignore flag if None, otherwise wrap in single quotes."""
		if v is None:
			return []
		else:
			return [k, '\'{}\''.format(v)]

	# start out the command
	cmd = ['./jarjar']

	# exit status default message if needed
	if not m:
		m = '\"Final task exited with status: $?.\"'
		cmd += ['--message', m]
	else:
		cmd += make_flag('--message', m)

	cmd += make_flag('--channel', c)
	cmd += make_flag('--webhook', w)
	return ' '.join(cmd)


def main():

	# pare args
	MESSAGE = ' '.join(ARGS.message)
	WEBHOOK = ARGS.webhook
	CHANNEL = ARGS.channel
	PROGRAM = ' '.join(ARGS.program)
	ATTACH = ARGS.attach
	if ARGS.screen_name is None:
		if PROGRAM:
			SCREEN_NAME = '_'.join(ARGS.program).replace(' ', '_')
			SCREEN_NAME = re.sub(r'\W+', '', SCREEN_NAME)
			SCREEN_NAME = SCREEN_NAME[:min(len(SCREEN_NAME), 10)]
		else:
			SCREEN_NAME = None
	else:
		SCREEN_NAME = ARGS.screen_name

	# if there is no program, then we're done here...
	if not PROGRAM:
		jarjar(channel=CHANNEL, webhook=WEBHOOK).text(MESSAGE)
		return

	# make jarjar shell command
	NOTIFY = _make_jarjar_shell(m=MESSAGE, w=WEBHOOK, c=CHANNEL)

	# make sure screen is unique
	# --- raise error for manual names.
	# --- append suffix for auto names.
	screen = Screen(SCREEN_NAME, initialize=False)
	if screen.exists:
		if ARGS.screen_name is not None:
			raise Exception('There is already a screen by that name!')

		while screen.exists:
			SCREEN_NAME = _append_to_name(SCREEN_NAME)
			screen = Screen(SCREEN_NAME)

	# notify user of the screen name if not provided.
	if ARGS.screen_name is None:
		print('Creating screen: `{}`.'.format(SCREEN_NAME))

	# spin up the screen and run through the task
	screen.initialize()

	screen.send_commands('echo;' + PROGRAM + ';' + NOTIFY)

	# attach if needed
	if ATTACH:
		os.system('screen -r {}'.format(SCREEN_NAME))

	sys.exit(0)


if __name__ == '__main__':
	main()
